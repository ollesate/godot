[gd_scene load_steps=3 format=2]

[ext_resource path="res://Scenes/Map/Levels/DizzyHighway.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

onready var panel = $MarginContainer/HBoxContainer/Panel
onready var panelBox = $MarginContainer/HBoxContainer
onready var nameLabel = $MarginContainer2/Name
onready var descriptionLabel = $MarginContainer3/Description

var levels = [
	preload(\"res://Scenes/Map/Levels/DizzyHighway.tscn\"),
	preload(\"res://Scenes/Map/Levels/DizzyHighway.tscn\"),
	preload(\"res://Scenes/Map/Levels/DizzyHighway.tscn\")
]

func _ready():
	$Maps.connect(\"resized\", self, \"mapContainerResized\", [$Maps])
	for level in levels:
		var map = level.instance()
		$Maps.add_child(map)

var selectedMap = 0

func mapContainerResized(container):
	var padding = Vector2(32, 32)
	for i in range(container.get_child_count()):
		var map = container.get_child(i)
		var mapSize = getMapSize(map)
		var targetSize = container.rect_size - padding * 2
		scaleMap(map, mapSize, targetSize)
		var realMapSize = mapSize * map.scale 
		var screenLengths = i * Vector2(container.rect_size.x, 0)
		map.position = (targetSize - realMapSize) / 2 + padding + screenLengths

func _process(delta):
	if Input.is_key_pressed(KEY_LEFT):
		nextMap(-1)
	if Input.is_key_pressed(KEY_RIGHT):
		nextMap(1)

func nextMap(direction):
	var tween = $MapMoveTween
	if tween.is_active():
		return
	var nextMap = selectedMap + direction
	if nextMap < 0 or nextMap >= $Maps.get_child_count():
		return
	var moveLength = $Maps.rect_size.x
	for child in $Maps.get_children():
		var pos = child.position
		tween.interpolate_property(child, \"position\",
	        pos, pos + Vector2(moveLength, 0) * direction * -1, 0.3,
    	    Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
	tween.start()
	yield(tween, \"tween_all_completed\")
	selectedMap = nextMap
	print(\"selected map\", selectedMap)
	
func scaleMap(map, originSize, targetSize):
	var scale = originSize / targetSize
	var maxScale = max(scale.x, scale.y)
	map.scale = Vector2.ONE / maxScale

func getMapSize(map):
	var maxY = 0
	var maxX = 0
	for child in map.get_children():
		if child is TileMap:
			var tileMap = child
			var size = tileMap.get_used_rect().size * tileMap.cell_size
			if size.x > maxX:
				maxX = size.x
			if size.y > maxY:
				maxY = size.y
	return Vector2(maxX, maxY)"

[node name="LevelPicker" type="VBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
script = SubResource( 1 )

[node name="MarginContainer2" type="MarginContainer" parent="."]
editor/display_folded = true
margin_right = 1024.0
margin_bottom = 30.0
size_flags_horizontal = 3
custom_constants/margin_top = 16

[node name="Name" type="Label" parent="MarginContainer2"]
margin_top = 16.0
margin_right = 1024.0
margin_bottom = 30.0
text = "Name of map"
align = 1

[node name="MapMoveTween" type="Tween" parent="."]

[node name="Maps" type="Control" parent="."]
margin_top = 34.0
margin_right = 1024.0
margin_bottom = 550.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="DizzyHighway" parent="Maps" instance=ExtResource( 1 )]

[node name="MarginContainer" type="MarginContainer" parent="."]
visible = false
margin_top = 38.0
margin_right = 1024.0
margin_bottom = 550.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="HBoxContainer" type="HBoxContainer" parent="MarginContainer"]
margin_left = 50.0
margin_top = 50.0
margin_right = 974.0
margin_bottom = 462.0
grow_horizontal = 0

[node name="Panel" type="Panel" parent="MarginContainer/HBoxContainer"]
margin_right = 100.0
margin_bottom = 412.0
rect_min_size = Vector2( 100, 0 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="MarginContainer/HBoxContainer/Panel"]
margin_right = 40.0
margin_bottom = 14.0
text = "One
"

[node name="Panel2" type="Panel" parent="MarginContainer/HBoxContainer"]
margin_left = 104.0
margin_right = 204.0
margin_bottom = 412.0
rect_min_size = Vector2( 100, 0 )
size_flags_vertical = 3

[node name="Label2" type="Label" parent="MarginContainer/HBoxContainer/Panel2"]
margin_right = 40.0
margin_bottom = 31.0
text = "Two
"

[node name="Panel3" type="Panel" parent="MarginContainer/HBoxContainer"]
margin_left = 208.0
margin_right = 308.0
margin_bottom = 412.0
rect_min_size = Vector2( 100, 0 )
size_flags_vertical = 3

[node name="Label3" type="Label" parent="MarginContainer/HBoxContainer/Panel3"]
margin_right = 40.0
margin_bottom = 31.0
text = "Three"

[node name="MarginContainer3" type="MarginContainer" parent="."]
margin_top = 554.0
margin_right = 1024.0
margin_bottom = 600.0
custom_constants/margin_bottom = 32

[node name="Description" type="Label" parent="MarginContainer3"]
margin_right = 1024.0
margin_bottom = 14.0
text = "Description of map"
align = 1
