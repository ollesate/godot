[gd_scene load_steps=11 format=2]

[ext_resource path="res://Assets/new_dynamicfont.tres" type="DynamicFont" id=1]
[ext_resource path="res://Scenes/Network.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Game/GameBoard.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

signal onAllReady()
signal onAllReadyCancelled()

var playerInfos = []
var readyPlayers = []
var cardPlayerInfos = {}
var isPlaying

onready var gameUi = $GameBoard/Ui
onready var subtitle = $GameBoard/Ui/Header/Subtitle
onready var gameBoard = $GameBoard
onready var progress = $GameBoard/Ui/Header/Progress
onready var title = $GameBoard/Ui/Header/Title

func onPlayerJoined(info):
	gameBoard.addPlayer(info)
	playerInfos.append(info)
	updateReady()
	
func onPlayerLeft(info):
	gameBoard.removePlayer(info)
	playerInfos.remove(playerInfos.find(info))
	updateReady()

func onPlayerReady(info):
	readyPlayers.append(info)
	gameBoard.onPlayerReady(info)
	updateReady()
	if playerInfos.size() > 0 && playerInfos.size() == readyPlayers.size():
		emit_signal(\"onAllReady\")

func onPlayerUnready(info):
	readyPlayers.remove(readyPlayers.find(info))
	gameBoard.onPlayerUnready(info)
	updateReady()
	if readyPlayers.size() == playerInfos.size() - 1:
		emit_signal(\"onAllReadyCancelled\")

func clearReady():
	for info in readyPlayers:
		$GameBoard.onPlayerUnready(info)
	readyPlayers.clear()
	subtitle.text = \"\"

func updateReady():
	if not isPlaying:
		var text = str(readyPlayers.size(), \" / \", $Network.playerInfos.size(), \" ready\")
		subtitle.text = text
	
func onPlayerUpdateInfo(info):
	gameBoard.updatePlayerInfo(info)

func _ready():
	#var size = gameBoard.get_node(\"Map\").getSize()
	#ScreenUtils.viewport(self, Vector2(size.x + 800, size.y))

	$Network.connect(\"onPlayerJoined\", self, \"onPlayerJoined\")
	$Network.connect(\"onPlayerLeft\", self, \"onPlayerLeft\")
	$Network.connect(\"onPlayerReady\", self, \"onPlayerReady\")
	$Network.connect(\"onPlayerUnready\", self, \"onPlayerUnready\")
	$Network.connect(\"onPlayerUpdateInfo\", self, \"onPlayerUpdateInfo\")
	
	gameBoard.connect(\"onTurnStart\", self, \"onTurnStart\")
	gameBoard.connect(\"onPhaseStart\", self, \"onPhaseStart\")
	gameBoard.connect(\"onPlayerWon\", self, \"onPlayerWon\")
	gameBoard.connect(\"onRobotHpChanged\", self, \"onRobotHpChanged\")

	while true: # Play endlessly...
		progress.hide()
		title.show()
		title.text = getWaitingTitle()
		var countdown = 5
		var time = countdown
		var sleep = 0.5
		clearReady()
		while time > 0:
			if playerInfos.size() == 0 or readyPlayers.size() != playerInfos.size():
				title.text = getWaitingTitle()
				time = countdown
				yield(self, \"onAllReady\")
			title.text = str(\"Starting game in \", floor(time))
			yield(Actions.wait(sleep).perform(), \"finished\")
			time -= sleep
		$Network.rpc(\"onGameStarted\")
		yield(playGame(), \"completed\")
		# resetGame()

func getWaitingTitle():
	var ip = IP.get_local_addresses()[4]
	return \"IP: %s\\nWaiting for players...\" % ip

func onPhaseStart(phase):
	gameUi.showToast(phase, 2)
	
func onTurnStart(turn):
	title.text = str(\"Turn \", turn)

func onPlayerWon(info):
	title.text = str(info.name, \" wins!\")
	$GameBoard.pause()

func onRobotHpChanged(info, hpLeft):
	$Network.rpc_id(info.id, \"onRobotHpChanged\", hpLeft)

func cardStarted(card):
	var cardInfo = cardPlayerInfos[card]
	$Network.rpc_id(cardInfo.player.id, \"onCardStarted\", cardInfo.card)
	# $GameUi/Header/Subtitle.text = str(cardInfo.player.name, \"'s turn: \", cardInfo.card.description, \", \", cardInfo.card.priority)
		
func cardFinished(card):
	var cardInfo = cardPlayerInfos[card]
	$Network.rpc_id(cardInfo.player.id, \"onCardFinished\", cardInfo.card)

func playGame():
	print(\"playGame\")
	
	var gameFinished = false
	
	while !gameFinished:
		cardPlayerInfos.clear()
		
		clearReady()
		# Give cards to player
		for info in playerInfos:
			var cardInfos = CardDeck.generateCardInfos(9)
			$Network.dealCardsToPlayer(info.id, cardInfos)
		
		gameUi.startCountdown(60)
		progress.show()
		title.text = \"Card phase\"
		updateReady()
		while not $GameBoard/Ui.finished && playerInfos.size() != readyPlayers.size():
			yield(Actions.wait(0.5).perform(), \"finished\")
		progress.hide()
		subtitle.text = \"\"

		var cardInfos = $Network.cardInfos
		var turns = []
		for turnIndex in range(5):
			var turn = []
			for playerInfo in cardInfos.keys():
				if cardInfos[playerInfo].size() > turnIndex:
					var cardInfo = cardInfos[playerInfo][turnIndex]
					var card = CardDeck.cardFromInfo(cardInfo)
					card.connect(\"cardStarted\", self, \"cardStarted\")
					card.connect(\"cardFinished\", self, \"cardFinished\")
					turn.append({\"card\": card, \"playerInfo\": playerInfo, \"priority\": cardInfo.priority})
					cardPlayerInfos[card] = {\"card\": cardInfo, \"player\": playerInfo} 
			turn.sort_custom(self, \"prioritySort\")
			turns.append(turn)
			print(turn)
		
		isPlaying = true		
		subtitle.text = \"\"
		$Network.rpc(\"startSimulation\")
		yield(gameBoard.simulateGame(turns), \"completed\")
		isPlaying = false		

		gameFinished = false

	# Game is finished, wait for some time
	# Perhaps wait some player response?
	# Restart game

func prioritySort(a, b):
	return a.priority > b.priority
"

[sub_resource type="GDScript" id=2]
script/source = "tool
extends Node

export(NodePath) var target

func _ready():
	if not Engine.editor_hint:
		ScreenUtils.viewportFromControl(get_node(target))
"

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0, 0, 0, 0.596078 )

[sub_resource type="GDScript" id=4]
script/source = "extends PanelContainer

onready var addPlayerButton: Button = $Margin/VBox/HBox/AddPlayerButton
var playerScene = preload(\"res://Scenes/Player/PlayerGame.tscn\")

onready var gameBoard = $\"/root/Game/GameBoard\"

func _ready():
	addPlayerButton.connect(\"pressed\", self, \"addPlayer\")
	gameBoard.connect(\"onRobotSpawned\", self, \"onRobotSpawned\")
	
func addPlayer():
	var player = playerScene.instance()
	player.rect_scale = Vector2(0.0, 0.5)
	$\"/root/Game/Debug\".add_child(player)
	player.connectTo(\"localhost\")

func onRobotSpawned(robot):
	var debugUi = robot.get_node(\"DebugUi\")
	debugUi.showUi(false)
	debugUi.cardHand.modulate.a = 0
	var id = robot.info.id
	var client = yield(getPlayerClient(id), \"completed\")
	var playerNetwork = client.get_node(\"Network\")
	
	debugUi.connect(\"onReadyPressed\", self, \"onReadyPressed\", [client])
	debugUi.cardHand.connect(\"onSwap\", client, \"onSwap\")
	playerNetwork.connect(\"onCardStarted\", debugUi.cardHand, \"selectCard\")
	playerNetwork.connect(\"onCardFinished\", debugUi.cardHand, \"unselectCard\")
	playerNetwork.connect(\"onStartSimulation\", debugUi.cardHand, \"setLocked\", [true])
	playerNetwork.connect(\"onPlayerHpChanged\", debugUi.cardHand, \"setHpLeft\")
	playerNetwork.connect(\"onStartSimulation\", debugUi, \"showReadyButton\", [false])
	playerNetwork.connect(\"onPlayerCards\", self, \"onPlayerCards\", [id])

func onPlayerCards(cards, id):
	var robot = getPlayerRobot(id)
	if robot:
		var debugUi = robot.get_node(\"DebugUi\")
		debugUi.cardHand.modulate.a = 1
		debugUi.showReadyButton(true)
		debugUi.cardHand.setCards(cards)
		debugUi.cardHand.visible = true

func onReadyPressed(client):
	if !client.playerHand:
		client.lobby.onButtonPressed()
	else:
		client.playerHand.buttonPressed()

func getPlayerRobot(id):
	for player in get_tree().get_nodes_in_group(\"players\"):
		if player.info.id == id:
			return player

func getPlayerClient(id):
	for client in get_tree().get_nodes_in_group(\"clients\"):
		if client.network.id == 0:
			yield(client.network, \"onConnected\")
		if client.network.id == id:
			yield(Actions.wait(0.1).perform(), \"finished\")
			return client

func onPlayerReadyPressed(token):
	for client in get_tree().get_nodes_in_group(\"clients\"):
		if client.get_node(\"Network\").id == token.info.id:
			client.lobby.onButtonPressed()
"

[sub_resource type="GDScript" id=5]
script/source = "extends Control

var outlines = {}
var drawOutlines = false

func _draw():
	if !drawOutlines:
		return
	outlines.clear()
	outlineNode(get_tree().root.get_node(\"Game\"))

func outlineNode(node: Node):
	var script: Resource = node.get_script()
	if script == null:
		return
	var outline: Rect2
	if node is Node2D:
		outline = getOutlineNode2D(node)
	if !outline:
		return
	draw_rect(outline, Color.red, false)
	var idx = script.resource_path.find_last(\"/\") + 1
	var name = script.resource_path.substr(idx, script.resource_path.length() - idx)
	draw_string(Global.font, outline.position, name)
	outlines[node] = outline
	for child in node.get_children():
		outlineNode(child)

func getOutlineNode2D(node: Node2D):
	for child in node.get_children():
		if child is Sprite:
			var sprite: Sprite = child
			var rectSprite: Rect2 = sprite.region_rect
			rectSprite.size *= sprite.scale
			rectSprite.position += node.position - rectSprite.size / 2
			return rectSprite
	var size = Vector2.ONE * 20
	var pos = Vector2(node.position.x, node.position.y) - size / 2
	return Rect2(pos, size)

func _input(event):
	var prevDraw = drawOutlines
	if Input.is_key_pressed(KEY_TAB):
		print(\"pressed tab\")
		drawOutlines = true
	else:
		drawOutlines = false
	if prevDraw != drawOutlines:
		update()

func _gui_input(event):
	if !drawOutlines:
		return
	print(\"draw outliines\")
	if event is InputEventMouseButton:
		var mouseEvent: InputEventMouseButton = event
		if mouseEvent.is_pressed():
			for node in outlines:
				var rect: Rect2 = outlines[node]
				var pointRect = Rect2(mouseEvent.position, Vector2.ONE)
				if rect.intersects(pointRect):
					LiveEditor.editScript(node.get_script())
					return"

[sub_resource type="GDScript" id=6]
script/source = "extends Node2D

func _ready():
	yield(Actions.wait(1).perform(), \"finished\")
	for client in get_tree().get_nodes_in_group(\"clients\"):
		client.connectTo(\"localhost\")"

[sub_resource type="GDScript" id=7]
script/source = "extends Node2D

const TOAST_DURATION = 0.5
const SPEEDUP_DUR = 5
const SPEEDUP_SCALE = 50

enum {BELT, LASER, SIZE}

var currentSpeedupDur = 0
var currentPhase = -1
var player

var speedupScale = 1

onready var gameUi = get_tree().root.get_node(\"Game/Gameboard/Ui\")
onready var gameboard = get_tree().root.get_node(\"Game/GameBoard\")

func _process(delta):
	if currentSpeedupDur > 0:
		currentSpeedupDur -= delta 
		if currentSpeedupDur <= 0:
			Engine.time_scale = speedupScale

func _input(event):
	if Input.is_key_pressed(KEY_ENTER):
		nextPhase()
	var robot = getRobot()
	if not robot:
		return
	if Input.is_key_pressed(KEY_W):
		robot.moveAction(Robot.FORWARD, 1).with(robot).perform()
	if Input.is_key_pressed(KEY_S):
		robot.moveAction(Robot.BACKWARDS, 1).with(robot).perform()
	if Input.is_key_pressed(KEY_A):
		robot.rotateAction(Robot.LEFT).with(robot).perform()
	if Input.is_key_pressed(KEY_D):
		robot.rotateAction(Robot.RIGHT).with(robot).perform()
	if Input.is_key_pressed(KEY_F):
		robot.shootAction().with(robot).perform()
	if Input.is_key_pressed(KEY_RIGHT):
		forwardGame()
	if Input.is_key_pressed(KEY_KP_ADD):
		speedUp()
	if Input.is_key_pressed(KEY_KP_SUBTRACT):
		speedDown()

func getRobot():
	if player != null:
		return player
	var players = get_tree().get_nodes_in_group(\"players\")
	if players.size() > 0:
		player = players[0]
		return player
	return null

func forwardGame():
	print(\"forward game\")
	currentSpeedupDur = SPEEDUP_DUR
	Engine.time_scale = SPEEDUP_SCALE

func speedUp():
	print(\"Speed up\")
	speedupScale = speedupScale + 1
	if speedupScale > 3:
		speedupScale = 3
	if currentSpeedupDur > 0:
		return
	Engine.time_scale = speedupScale
	
func speedDown():
	print(\"Speed down\")
	speedupScale = speedupScale - 1
	if speedupScale < 1:
		speedupScale = 1
	if currentSpeedupDur > 0:
		return
	Engine.time_scale = speedupScale

func nextPhase():
	gameboard.saveCheckpointsIfPossible()
	currentPhase = (currentPhase + 1) % SIZE
	match currentPhase:
		BELT:
			gameboard.beltsMove()
		LASER:
			gameboard.lasersShoot()
"

[node name="Game" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ViewportTarget" type="Node" parent="."]
script = SubResource( 2 )
target = NodePath("../GameBoard/Map")

[node name="Network" parent="." instance=ExtResource( 2 )]
isServer = true

[node name="GameBoard" parent="." instance=ExtResource( 3 )]

[node name="DebugOptions" type="PanelContainer" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -83.0
custom_styles/panel = SubResource( 3 )
script = SubResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Margin" type="MarginContainer" parent="DebugOptions"]
margin_right = 1024.0
margin_bottom = 83.0
custom_constants/margin_top = 16
custom_constants/margin_bottom = 16

[node name="VBox" type="VBoxContainer" parent="DebugOptions/Margin"]
margin_top = 16.0
margin_right = 1024.0
margin_bottom = 67.0

[node name="Title" type="Label" parent="DebugOptions/Margin/VBox"]
margin_right = 1024.0
margin_bottom = 27.0
custom_fonts/font = ExtResource( 1 )
text = "Debug Options"
align = 1
valign = 1

[node name="HBox" type="HBoxContainer" parent="DebugOptions/Margin/VBox"]
margin_top = 31.0
margin_right = 1024.0
margin_bottom = 51.0
alignment = 1

[node name="AddPlayerButton" type="Button" parent="DebugOptions/Margin/VBox/HBox"]
margin_left = 472.0
margin_right = 552.0
margin_bottom = 20.0
text = "Add player"

[node name="Debug" type="Node" parent="."]

[node name="LiveEditLayer" type="Control" parent="Debug"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 5 )

[node name="InstaConnect" type="Node2D" parent="Debug"]
visible = false
scale = Vector2( 0.2, 0.2 )
z_index = 3
script = SubResource( 6 )

[node name="DebugController" type="Node2D" parent="Debug"]
script = SubResource( 7 )
