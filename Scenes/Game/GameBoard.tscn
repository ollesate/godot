[gd_scene load_steps=15 format=2]

[ext_resource path="res://Scenes/Map/BaseMap.tscn" type="PackedScene" id=2]
[ext_resource path="res://Assets/Readiness-Regular.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://Assets/lifebar_bg.png" type="Texture" id=4]
[ext_resource path="res://Assets/lifebar_fill.png" type="Texture" id=5]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends Control

var playerInfos = []
var spawnPoints = {}
var robots = {}
var checkpoints = {}

signal lasersEnd()
signal onPhaseStart()
signal onTurnStart()
signal onPlayerWon()
signal onRobotHpChanged()
signal onRobotSpawned()

func simulateGame(turns):
	var cardTurns = []
	for turn in turns:
		var cardTurn = []
		for action in turn:
			action.card.with(robots[action.playerInfo])
			cardTurn.append(action.card)
		cardTurns.append(cardTurn)
	turns = cardTurns
	
	for i in range(turns.size()):
		var turn = turns[i]
		emit_signal(\"onTurnStart\", i + 1)
		print(\"Players act\")
		yield(playersAct(turn), \"completed\")
		print(\"Lasers shoot\")
		emit_signal(\"onPhaseStart\", \"Lasers shoot\")
		yield(lasersShoot(), \"completed\")
		yield(Actions.wait(2).perform(), \"finished\")
		print(\"Belts move\")
		emit_signal(\"onPhaseStart\", \"Belts move\")
		yield(Actions.wait(2).perform(), \"finished\")
		yield(beltsMove(), \"completed\")

	# Spawn players again
	for playerInfo in playerInfos:
		spawnRobot(playerInfo)

func playersAct(turn):	
	for card in turn:
		card.perform()
		if card.type == Cards.MOVE:
			var finished = false
			while(not finished and card.character != null):
				finished = yield(card, \"stepFinished\") == 0
				yield(getRobotsFallAction().perform(), \"finished\")
			saveCheckpointsIfPossible()
			yield(syncPositions().perform(), \"finished\")
		else:
			yield(card, \"finished\")

	emit_signal(\"onPhaseStart\", \"Players fire\")
	yield(Actions.wait(2).perform(), \"finished\")
	var shootActions = []
	for robot in robots.values():
		shootActions.append(Robot.shootAction().with(robot))
	yield(Parallell.new(shootActions).perform(), \"finished\")
	yield(Actions.wait(1).perform(), \"finished\")

func lasersShoot():
	var lasers = get_tree().get_nodes_in_group(\"lasers\")
	for laser in lasers:
		laser.shoot()
	for laser in lasers:
		yield(laser, \"finished\")
	yield(Actions.wait(0.25).perform(), \"finished\")

func saveCheckpointsIfPossible():
	for info in robots.keys():
		var robot = robots[info] if robots.has(info) else null
		if not robot: # Player might have died
			continue
			
		var checkpoint = $Map.getCheckpoint(robot)
		if not checkpoint: # Check if player is on a cp
			continue
			
		print(\"on checkpoint\")
		var currentCheckpointNo = checkpoints[info].number if checkpoints.has(info) else 0
		if checkpoint.number - currentCheckpointNo != 1:
			continue # not next checkpoint...

		if currentCheckpointNo != 0: # Remove old if not first
			checkpoint.remove(info)
		checkpoints[info] = checkpoint
		checkpoint.touch(info)
		
		var nextCheckpoint = $Map.getCheckpointIndexed(checkpoint.number + 1)
		if nextCheckpoint:
			nextCheckpoint.setNext()
		else: # There's no next cp so this player won
			emit_signal(\"onPlayerWon\", info)

func beltsMove():
	for i in range(1, 3):
		var beltAction = $Map.getBeltAction(i)
		yield(beltAction.perform(), \"finished\")
		yield(getRobotsFallAction().perform(), \"finished\")
	saveCheckpointsIfPossible()
	yield(syncPositions().perform(), \"finished\")

func syncPositions():
	var actions = []
	for robot in robots.values():
		var pos = robot.position
		var adjustedPos = $Map.getWorldPos(robot)
		var action = Actions.moveTo(pos, adjustedPos).with(robot)
		if adjustedPos != robot.position:
			actions.append(action)
	return Parallell.new(actions)

func getRobotsFallAction():
	var fallingActions = []
	for fallingRobot in $Map.getPlayersInHole():
		fallingActions.append(Robot.fallAction().with(fallingRobot))
	return Parallell.new(fallingActions)

func spawnRobot(info):
	if robots.has(info):
		return
	var robot = preload(\"res://Scenes/Game/Robot.tscn\").instance()
	robot.connect(\"onDestroyed\", self, \"onRobotDestroyed\")
	robot.connect(\"onHit\", self, \"onRobotHit\")
	add_child(robot)
	robot.position = checkpoints[info].position if checkpoints.has(info) else spawnPoints[info].position
	robots[info] = robot
	robot.info = info
	emit_signal(\"onRobotSpawned\", robot)

func onRobotDestroyed(robot):
	var index = robots.values().find(robot)
	for info in robots.keys():
		if robot == robots[info]:
			robots.erase(info)

func onRobotHit(robot):
	for info in robots.keys():
		if robot == robots[info]:
			emit_signal(\"onPlayerHpChanged\", info, robot.currentHp)

func addPlayer(info):
	var spawnPoint = $Map.getSpawn(playerInfos.size())
	playerInfos.append(info)
	spawnPoints[info] = spawnPoint
	spawnRobot(info)

func removePlayer(info):
	playerInfos.erase(info)
	spawnPoints.erase(info)
	var robot = robots[info]
	robots.erase(info)
	remove_child(robot)

func onPlayerReady(info):
	robots[info].setReady(true)
	
func onPlayerUnready(info):
	robots[info].setReady(false)

func updatePlayerInfo(info):
	robots[info].playerName = info.name
	robots[info].color = info.color

func pause():
	get_tree().paused = true
"

[sub_resource type="GDScript" id=2]
script/source = "extends Control

signal countdownFinished()

var finished = false

func _ready():
	$Header/Progress.connect(\"finished\", self, \"countdownFinished\")
	$Toast.hide()

func startCountdown(time):
	finished = false
	$Header/Progress.start(time)

func countdownFinished():
	finished = true
	emit_signal(\"countdownFinished\")

func showSmallToast(text, duration):
	$SmallToast.showToast(text, duration)

func showToast(text, duration):
	$Toast.show()
	$Toast.modulate.a = 1
	$Toast.text = text
	var from = $Toast.modulate
	var to = from
	to.a = 0
	$Toast/Tween.interpolate_property($Toast, \"modulate\", from, to, duration, Tween.TRANS_QUAD, Tween.EASE_IN)
	$Toast/Tween.start()
"

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.431373, 0.431373, 0.431373, 1 )
border_color = Color( 1, 1, 1, 1 )
corner_radius_top_left = 16
corner_radius_top_right = 16
corner_radius_bottom_right = 16
corner_radius_bottom_left = 16

[sub_resource type="DynamicFont" id=4]
size = 32
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=5]
size = 18
font_data = ExtResource( 3 )

[sub_resource type="GDScript" id=6]
script/source = "extends TextureProgress

signal finished()

var duration
var startDuration
var started

func start(duration):
	startDuration = duration
	self.duration = duration
	started = true
	
func _process(delta):
	if !started:
		return
	value = duration / startDuration * 100
	duration -= delta
	if duration < 0:
		emit_signal(\"finished\")
		started = false"

[sub_resource type="DynamicFont" id=7]
size = 40
font_data = ExtResource( 3 )

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.431373, 0.431373, 0.431373, 1 )
corner_radius_top_left = 16
corner_radius_top_right = 16
corner_radius_bottom_right = 16
corner_radius_bottom_left = 16
expand_margin_left = 16.0
expand_margin_right = 16.0
expand_margin_top = 16.0
expand_margin_bottom = 16.0

[sub_resource type="DynamicFont" id=9]
size = 14
font_data = ExtResource( 3 )

[sub_resource type="GDScript" id=10]
script/source = "extends Label

const DURATION = 0.5

func _ready():
	hide()

func showToast(text, duration = DURATION):
	show()
	modulate.a = 1
	self.text = str(text)
	var from = modulate
	var to = from
	to.a = 0
	print(\"from \", from)
	print(\"to \", to)
	print(\"duration \", duration)
	$Tween.interpolate_property(self, \"modulate\", from, to, duration, Tween.TRANS_QUAD, Tween.EASE_IN)
	$Tween.start()"

[node name="GameBoard" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Map" parent="." instance=ExtResource( 2 )]

[node name="Ui" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 0.663452
margin_right = 0.663452
mouse_filter = 2
script = SubResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Header" type="VBoxContainer" parent="Ui"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -294.0
margin_top = 18.0
margin_right = 294.0
margin_bottom = 89.0

[node name="Title" type="Label" parent="Ui/Header"]
modulate = Color( 1, 1, 1, 0.752941 )
margin_right = 588.0
margin_bottom = 43.0
custom_styles/normal = SubResource( 3 )
custom_fonts/font = SubResource( 4 )
text = "Card 1"
align = 1

[node name="Subtitle" type="Label" parent="Ui/Header"]
margin_top = 47.0
margin_right = 588.0
margin_bottom = 71.0
custom_fonts/font = SubResource( 5 )
text = "Anna's turn: Rotate Right, 120"
align = 1

[node name="Progress" type="TextureProgress" parent="Ui/Header"]
margin_top = 75.0
margin_right = 588.0
margin_bottom = 110.0
rect_min_size = Vector2( 200, 35 )
step = 0.0
texture_under = ExtResource( 4 )
texture_progress = ExtResource( 5 )
nine_patch_stretch = true
stretch_margin_left = 100
stretch_margin_right = 100
script = SubResource( 6 )

[node name="Toast" type="Label" parent="Ui"]
modulate = Color( 1, 1, 1, 0.752941 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -250.0
margin_top = -26.5
margin_right = 250.0
margin_bottom = 26.5
rect_min_size = Vector2( 500, 0 )
custom_fonts/font = SubResource( 7 )
text = "Phase: Lasers"
align = 1

[node name="Panel" type="Panel" parent="Ui/Toast"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 0.1, 0 )
custom_styles/panel = SubResource( 8 )

[node name="Tween" type="Tween" parent="Ui/Toast"]

[node name="SmallToast" type="Label" parent="Ui"]
modulate = Color( 1, 1, 1, 0.752941 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 388.0
margin_top = -213.0
margin_right = 399.0
margin_bottom = -194.0
rect_min_size = Vector2( 20, 0 )
custom_fonts/font = SubResource( 9 )
text = "+1"
align = 1
script = SubResource( 10 )

[node name="Panel" type="Panel" parent="Ui/SmallToast"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 4
size_flags_vertical = 4
custom_styles/panel = SubResource( 8 )

[node name="Tween" type="Tween" parent="Ui/SmallToast"]
