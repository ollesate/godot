[gd_scene load_steps=10 format=2]

[ext_resource path="res://Network.tscn" type="PackedScene" id=1]
[ext_resource path="res://DizzyHighway.tscn" type="PackedScene" id=2]
[ext_resource path="res://GameUi.tscn" type="PackedScene" id=3]
[ext_resource path="res://PlayerScene.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

signal onAllReady()
signal onAllReadyCancelled()

var playerInfos = []
var readyPlayers = []
var cardPlayerInfos = {}
var isPlaying

func onPlayerJoined(info):
	$Game.addPlayer(info)
	playerInfos.append(info)
	updateReady()
	
func onPlayerLeft(info):
	$Game.removePlayer(info)
	playerInfos.remove(playerInfos.find(info))
	updateReady()

func onPlayerReady(info):
	readyPlayers.append(info)
	$Game.onPlayerReady(info)
	updateReady()
	if playerInfos.size() > 0 && playerInfos.size() == readyPlayers.size():
		emit_signal(\"onAllReady\")

func onPlayerUnready(info):
	readyPlayers.remove(readyPlayers.find(info))
	$Game.onPlayerUnready(info)
	updateReady()
	if readyPlayers.size() == playerInfos.size() - 1:
		emit_signal(\"onAllReadyCancelled\")

func clearReady():
	for info in readyPlayers:
		$Game.onPlayerUnready(info)
	readyPlayers.clear()
	$GameUi/Header/Subtitle.text = \"\"

func updateReady():
	if not isPlaying:
		var text = str(readyPlayers.size(), \" / \", $Network.playerInfos.size(), \" ready\")
		$GameUi/Header/Subtitle.text = text
	
func onPlayerUpdateInfo(info):
	$Game.updatePlayerInfo(info)

func _ready():
	ScreenUtils.viewport(self, 	$Game/Map.getSize())

	$Network.connect(\"onPlayerJoined\", self, \"onPlayerJoined\")
	$Network.connect(\"onPlayerLeft\", self, \"onPlayerLeft\")
	$Network.connect(\"onPlayerReady\", self, \"onPlayerReady\")
	$Network.connect(\"onPlayerUnready\", self, \"onPlayerUnready\")
	$Network.connect(\"onPlayerUpdateInfo\", self, \"onPlayerUpdateInfo\")
	
	$Game.connect(\"onTurnStart\", self, \"onTurnStart\")
	$Game.connect(\"onPhaseStart\", self, \"onPhaseStart\")
	$Game.connect(\"onPlayerWon\", self, \"onPlayerWon\")
	$Game.connect(\"onPlayerHpChanged\", self, \"onPlayerHpChanged\")

	while true: # Play endlessly...
		$GameUi/Header/Progress.hide()
		$GameUi/Header/Title.show()
		$GameUi/Header/Title.text = getWaitingTitle()
		var countdown = 5
		var time = countdown
		var sleep = 0.5
		clearReady()
		while time > 0:
			if playerInfos.size() == 0 or readyPlayers.size() != playerInfos.size():
				$GameUi/Header/Title.text = getWaitingTitle()
				time = countdown
				yield(self, \"onAllReady\")
			$GameUi/Header/Title.text = str(\"Starting game in \", floor(time))
			yield(Actions.wait(sleep).perform(), \"finished\")
			time -= sleep
		$Network.rpc(\"onGameStarted\")
		yield(playGame(), \"completed\")
		# resetGame()

func getWaitingTitle():
	var ip = IP.get_local_addresses()[4]
	return \"IP: %s\\nWaiting for players...\" % ip

func onPhaseStart(phase):
	$GameUi.showToast(phase, 2)
	
func onTurnStart(turn):
	$GameUi/Header/Title.text = str(\"Turn \", turn)

func onPlayerWon(info):
	$GameUi/Header/Title.text = str(info.name, \" wins!\")
	$Game.pause()

func onPlayerHpChanged(info, hpLeft):
	$Network.rpc_id(info.id, \"onPlayerHpChanged\", hpLeft)

func cardStarted(card):
	var cardInfo = cardPlayerInfos[card]
	$Network.rpc_id(cardInfo.player.id, \"onCardStarted\", cardInfo.card)
	# $GameUi/Header/Subtitle.text = str(cardInfo.player.name, \"'s turn: \", cardInfo.card.description, \", \", cardInfo.card.priority)
		
func cardFinished(card):
	var cardInfo = cardPlayerInfos[card]
	$Network.rpc_id(cardInfo.player.id, \"onCardFinished\", cardInfo.card)

func playGame():
	print(\"playGame\")
	
	var gameFinished = false
	
	while !gameFinished:
		cardPlayerInfos.clear()
		
		clearReady()
		# Give cards to player
		for info in playerInfos:
			var cardInfos = CardDeck.generateCardInfos(9)
			$Network.dealCardsToPlayer(info.id, cardInfos)
		
		$GameUi.startCountdown(60)
		$GameUi/Header/Progress.show()
		$GameUi/Header/Title.text = \"Card phase\"
		updateReady()
		while not $GameUi.finished && playerInfos.size() != readyPlayers.size():
			yield(Actions.wait(0.5).perform(), \"finished\")
		$GameUi/Header/Progress.hide()
		$GameUi/Header/Subtitle.text = \"\"

		var cardInfos = $Network.cardInfos
		var turns = []
		for turnIndex in range(5):
			var turn = []
			for playerInfo in cardInfos.keys():
				if cardInfos[playerInfo].size() > turnIndex:
					var cardInfo = cardInfos[playerInfo][turnIndex]
					var card = CardDeck.cardFromInfo(cardInfo)
					card.connect(\"cardStarted\", self, \"cardStarted\")
					card.connect(\"cardFinished\", self, \"cardFinished\")
					turn.append({\"card\": card, \"playerInfo\": playerInfo, \"priority\": cardInfo.priority})
					cardPlayerInfos[card] = {\"card\": cardInfo, \"player\": playerInfo} 
			turn.sort_custom(self, \"prioritySort\")
			turns.append(turn)
			print(turn)
		
		isPlaying = true		
		$GameUi/Header/Subtitle.text = \"\"
		$Network.rpc(\"startSimulation\")
		yield($Game.simulateGame(turns), \"completed\")
		isPlaying = false		

		gameFinished = false

	# Game is finished, wait for some time
	# Perhaps wait some player response?
	# Restart game

func prioritySort(a, b):
    return a.priority > b.priority"

[sub_resource type="GDScript" id=2]
script/source = "extends Node2D

func _ready():
	yield(Actions.wait(1).perform(), \"finished\")
	for client in get_tree().get_nodes_in_group(\"clients\"):
		client.connectTo(\"localhost\")"

[sub_resource type="GDScript" id=3]
script/source = "extends Node2D

var playerInfos = []
var spawnPoints = {}
var players = {}
var checkpoints = {}

signal lasersEnd()
signal onPhaseStart()
signal onTurnStart()
signal onPlayerWon()
signal onPlayerHpChanged()

func _ready():
	pass

func simulateGame(turns):
	var cardTurns = []
	for turn in turns:
		var cardTurn = []
		for action in turn:
			action.card.with(players[action.playerInfo])
			cardTurn.append(action.card)
		cardTurns.append(cardTurn)
	turns = cardTurns
	
	for i in range(turns.size()):
		var turn = turns[i]
		emit_signal(\"onTurnStart\", i + 1)
		print(\"Players act\")
		yield(playersAct(turn), \"completed\")
		print(\"Lasers shoot\")
		emit_signal(\"onPhaseStart\", \"Lasers shoot\")
		yield(lasersShoot(), \"completed\")
		yield(Actions.wait(2).perform(), \"finished\")
		print(\"Belts move\")
		emit_signal(\"onPhaseStart\", \"Belts move\")
		yield(Actions.wait(2).perform(), \"finished\")
		yield(beltsMove(), \"completed\")

func playersAct(turn):	
	for card in turn:
		card.perform()
		if card.type == Cards.MOVE:
			var finished = false
			while(not finished and card.character != null):
				finished = yield(card, \"stepFinished\") == 0
				yield(getPlayersFallAction().perform(), \"finished\")
			saveCheckpointsIfPossible()
			yield(syncPositions().perform(), \"finished\")
		else:
			yield(card, \"finished\")

	emit_signal(\"onPhaseStart\", \"Players fire\")
	yield(Actions.wait(2).perform(), \"finished\")
	var shootActions = []
	for player in players.values():
		shootActions.append(Player.shootAction().with(player))
	yield(Parallell.new(shootActions).perform(), \"finished\")
	yield(Actions.wait(1).perform(), \"finished\")

func lasersShoot():
	var lasers = get_tree().get_nodes_in_group(\"lasers\")
	for laser in lasers:
		laser.shoot()
	for laser in lasers:
		yield(laser, \"finished\")
	yield(Actions.wait(0.25).perform(), \"finished\")

func saveCheckpointsIfPossible():
	for playerInfo in players.keys():
		var player = players[playerInfo] if players.has(playerInfo) else null
		if player:
			var checkpoint = $Map.getCheckpoint(player)
			if checkpoint:
				print(\"on checkpoint\")
				if !checkpoints.has(playerInfo) || checkpoint.number > checkpoints[playerInfo].number:
					if checkpoints.has(playerInfo):
						checkpoint.remove(playerInfo)
					checkpoints[playerInfo] = checkpoint
					checkpoint.touch(playerInfo)
					var nextCheckpoint = $Map.getCheckpointIndexed(checkpoint.number + 1)
					if nextCheckpoint:
						nextCheckpoint.setNext()
					else:
						emit_signal(\"onPlayerWon\", playerInfo)

func beltsMove():
	for i in range(1, 3):
		var beltAction = $Map.getBeltAction(i)
		yield(beltAction.perform(), \"finished\")
		yield(getPlayersFallAction().perform(), \"finished\")
	saveCheckpointsIfPossible()
	yield(syncPositions().perform(), \"finished\")

func syncPositions():
	var actions = []
	for player in players.values():
		var pos = player.position
		var adjustedPos = $Map.getWorldPos(player)
		var action = Actions.moveTo(pos, adjustedPos).with(player)
		if adjustedPos != player.position:
			actions.append(action)
	return Parallell.new(actions)

func getPlayersFallAction():
	var fallingActions = []
	for fallingPlayer in $Map.getPlayersInHole():
		fallingActions.append(Player.fallAction().with(fallingPlayer))
	return Parallell.new(fallingActions)

func beltPushPlayerIntoHole():
	var info = {\"name\": \"Olof\", \"color\": Color.blue}
	var player = addPlayer(info)
	
	var cards = {info: [Cards.moveAction(Player.FORWARD, 2), Cards.moveAction(Player.FORWARD, 2)]}
	yield(simulateGame(cards), \"completed\")
	print(\"Players finished\")
	player = spawnPlayer(info)
	cards = {info: [Cards.moveAction(Player.FORWARD, 2), Cards.moveAction(Player.FORWARD, 2)]}
	yield(simulateGame(cards), \"completed\")

func spawnPlayer(info):
	if players.has(info):
		return
	var player = preload(\"res://Player.tscn\").instance()
	player.connect(\"onDestroyed\", self, \"onPlayerDestroyed\")
	player.connect(\"onHit\", self, \"onPlayerHit\")
	add_child(player)
	player.position = checkpoints[info].position if checkpoints.has(info) else spawnPoints[info].position
	players[info] = player
	player.info = info
	return player

func onPlayerDestroyed(player):
	var index = players.values().find(player)
	for info in players.keys():
		if player == players[info]:
			players.erase(info)

func onPlayerHit(player):
	for info in players.keys():
		if player == players[info]:
			emit_signal(\"onPlayerHpChanged\", info, player.currentHp)

func addPlayer(info):
	var spawnPoint = $Map.getSpawn(playerInfos.size())
	playerInfos.append(info)
	spawnPoints[info] = spawnPoint
	return spawnPlayer(info)

func removePlayer(info):
	playerInfos.erase(info)
	spawnPoints.erase(info)
	var player = players[info]
	players.erase(info)
	remove_child(player)

func onPlayerReady(info):
	players[info].setReady(true)
	
func onPlayerUnready(info):
	players[info].setReady(false)

func updatePlayerInfo(info):
	players[info].playerName = info.name
	players[info].color = info.color

func pause():
	get_tree().paused = true"

[sub_resource type="GDScript" id=4]
script/source = "extends Node2D

const TOAST_DURATION = 0.5

enum {BELT, LASER, SIZE}

var currentPhase = -1
var player

func _ready():
	yield($\"../Game\", \"onTurnStart\")

func _input(event):
	if Input.is_key_pressed(KEY_ENTER):
		nextPhase()
	var player = getPlayer()
	if not player:
		return
	if Input.is_key_pressed(KEY_W):
		player.moveAction(Player.FORWARD, 1).with(player).perform()
	if Input.is_key_pressed(KEY_S):
		player.moveAction(Player.BACKWARDS, 1).with(player).perform()
	if Input.is_key_pressed(KEY_A):
		player.rotateAction(Player.LEFT).with(player).perform()
	if Input.is_key_pressed(KEY_D):
		player.rotateAction(Player.RIGHT).with(player).perform()
	if Input.is_key_pressed(KEY_SPACE):
		player.shootAction().with(player).perform()
	if Input.is_key_pressed(KEY_RIGHT):
		speedUp()
	if Input.is_key_pressed(KEY_LEFT):
		speedDown()

func getPlayer():
	if player != null:
		return player
	var players = get_tree().get_nodes_in_group(\"players\")
	if players.size() > 0:
		player = players[0]
		return player
	return null

func speedUp():
	var scale = Engine.time_scale
	scale *= 2.0
	Engine.time_scale = scale
	var text = \"Speed %s\" % scale
	$\"../GameUi\".showSmallToast(text, TOAST_DURATION * scale)
	
func speedDown():
	var scale = Engine.time_scale
	scale /= 2.0
	scale = scale if scale >= 1.0 else 1.0
	Engine.time_scale = scale
	var text = \"Speed %s\" % scale
	$\"../GameUi\".showSmallToast(text, TOAST_DURATION * scale)

func nextPhase():
	$\"../Game\".saveCheckpointsIfPossible()
	currentPhase = (currentPhase + 1) % SIZE
	match currentPhase:
		BELT:
			$\"../Game\".beltsMove()
		LASER:
			$\"../Game\".lasersShoot()"

[sub_resource type="GDScript" id=5]
script/source = "extends Node2D

func _ready():
	return
	var rootNetwork = $\"../Network\"
	var network = $\"../PlayerScene/Network\"
	yield(Actions.wait(0.5).perform(), \"finished\")
	$\"../PlayerScene\".onReady()
	print(\"wait for leave\")
	yield(network, \"onPlayerCards\")
	print(\"on cards\")
	var info = rootNetwork.playerInfos.values()[0]
	var cardInfos = [
		CardDeck.createInfo(490),
		CardDeck.createInfo(490),
		CardDeck.createInfo(490),
		CardDeck.createInfo(490)
	]
	rootNetwork.dealCardsToPlayer(info.id, cardInfos)"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )

[node name="DebugConnecter" type="Node2D" parent="."]
scale = Vector2( 0.2, 0.2 )
z_index = 3
script = SubResource( 2 )

[node name="Network" parent="." instance=ExtResource( 1 )]
isServer = true

[node name="Game" type="Node2D" parent="."]
script = SubResource( 3 )

[node name="Map" parent="Game" instance=ExtResource( 2 )]

[node name="GameUi" parent="." instance=ExtResource( 3 )]

[node name="DebugController" type="Node2D" parent="."]
script = SubResource( 4 )

[node name="Tutorial" type="Node2D" parent="."]
script = SubResource( 5 )

[node name="PlayerScene" parent="." instance=ExtResource( 4 )]
margin_left = 675.0
margin_top = 261.5
margin_right = 675.0
margin_bottom = 261.5
rect_scale = Vector2( 0.25, 0.25 )
