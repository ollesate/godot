[gd_scene load_steps=5 format=2]

[ext_resource path="res://Map.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var playerInfos = []
var readyPlayers = []

func onPlayerJoined(info):
	$Game.addPlayer(info)
	
func onPlayerLeft(info):
	$Game.removePlayer(info)

func onPlayerReady(info):
	$Game.onPlayerReady(info)

func onPlayerUnready(info):
	readyPlayers.remove(readyPlayers.find(info))
	$Game.onPlayerUnready(info)
	
func onPlayerInfoUpdated(info):
	$Game.updatePlayerInfo(info)

func _ready():
	while true: # Play endlessly...
		playerInfos = yield(waitForPlayers(), \"completed\")
		yield(playGame(), \"completed\")
		resetGame()

func waitForPlayers():
	print(\"waitForPlayers\")
	
	$Network.connect(\"onPlayerJoined\", self, \"onPlayerJoined\")
	$Network.connect(\"onPlayerLeft\", self, \"onPlayerLeft\")
	$Network.connect(\"onPlayerReady\", self, \"onPlayerReady\")
	$Network.connect(\"onPlayerUnready\", self, \"onPlayerUnready\")

	# Wait for players
	while $Network.playerInfos.size() == 0 || readyPlayers.size() != $Network.playerInfos.size():
		var info = yield($Network, \"onPlayerReady\") # Perhaps race condition
		readyPlayers.append(info)
	# Lock lobby
	return $Network.playerInfos

func resetGame():
	pass

func playGame():
	print(\"playGame\")
	
	var gameFinished = false
	
	while !gameFinished:
		# Give cards to player
		for info in playerInfos:
			var cards = Cards.generate(5) # Need to generate info, not actual cards
			$Network.rpc_id(info.id, \"dealCards\", cards)
		
		$GameUi.countdown(30)
		yield($GameUi, \"finished\")
		
		var playerCards = []
		for info in playerInfos:
			var cards = $Network.getCards(info.id)
			playerCards.append(info, cards)
		yield($Game.simulateGame(playerCards), \"completed\")
		
		gameFinished = $Game.gameFinished

	# Game is finished, wait for some time
	# Perhaps wait some player response?
	# Restart game"

[sub_resource type="GDScript" id=2]
script/source = "extends Node2D

const PORT = 1551
const MAX_PLAYERS = 4

export var isServer = false

var playerInfos = {}

signal onConnected()
signal onConnectionFailed()
signal onServerDisconnect()

signal onPlayerConnected()
signal onPlayerDisconnected()
signal onPlayerJoined()
signal onPlayerLeft()
signal onPlayerReady()
signal onPlayerUnready()

func _ready():
	custom_multiplayer = MultiplayerAPI.new()
	custom_multiplayer.set_root_node(self)
	var peer = NetworkedMultiplayerENet.new()
	if (isServer):
		print(\"server start\")
		peer.create_server(PORT, MAX_PLAYERS)
	else:
		print(\"client start\")
		peer.create_client(\"localhost\", PORT)
	custom_multiplayer.set_network_peer(peer)
	
	if isServer:
		custom_multiplayer.connect(\"network_peer_connected\", self, \"_player_connected\")
		custom_multiplayer.connect(\"network_peer_disconnected\", self, \"_player_disconnected\")
	else:
		custom_multiplayer.connect(\"connected_to_server\", self, \"_connected_ok\")
		custom_multiplayer.connect(\"connection_failed\", self, \"_connected_fail\")
		custom_multiplayer.connect(\"server_disconnected\", self, \"_server_disconnected\")

func _process(delta):
	if custom_multiplayer.has_network_peer():
		custom_multiplayer.poll()

remote func updateInfo(name, color):
	var id = custom_multiplayer.get_rpc_sender_id()
	playerInfos[id] = { id = id, name = name, color = color }
	emit_signal(\"onPlayerUpdateInfo\", playerInfos[id])

slave func dealCards(cardInfos):
	emit_signal(\"onPlayerCards\", cardInfos)

func _peer_connected(id):
	print(\"network peer connected \", id)
	var tempName = str(\"Player\", custom_multiplayer.get_network_connected_peers().size())
	playerInfos[id] = { id = id, name = tempName, color = Color.white }
	emit_signal(\"onPlayerConnected\", id)
	emit_signal(\"onPlayerJoined\", playerInfos[id])

func _peer_disconnected(id):
	var playerInfo = playerInfos[id]
	print(\"network peer disconnected \", playerInfo)
	playerInfos.erase(id)		
	emit_signal(\"onPlayerDisconnected\", id)
	emit_signal(\"onPlayerLeft\", playerInfo)

func _connected_to_server():
	# Only called on clients, not server.
	print(\"connected to server\")
	emit_signal(\"onConnected\")

func _server_disconnected():
	print(\"server disconnected\")
	emit_signal(\"onServerDisconnect\")

func _connected_fail():
	print(\"connected fail\")
	emit_signal(\"onConnectionFailed\")"

[sub_resource type="GDScript" id=3]
script/source = "extends Node2D

var playerInfos = []
var spawnPoints = {}
var players = {}
var checkpoints = {}

func _ready():
	yield(Actions.wait(0.5).perform(), \"finished\")
	beltPushPlayerIntoHole()

func startGame(allPlayerCards):
	var nTurns = 5
	var turns = []

	for i in range(nTurns):
		turns.append([])
	for info in playerInfos:
		if !players.has(info): # The player has no token
			print(\"player has no token\")
			continue
		var player = players[info]
		var cards = allPlayerCards[info]
		for i in range(nTurns):
			if cards.size() > i:
				var card = cards[i]
				turns[i].append(card.with(player))
	
	for turn in turns:
		for card in turn:
			card.perform()
			if card.type == Cards.MOVE:
				var finished = false
				while(not finished and card.character != null):
					finished = yield(card, \"stepFinished\") == 0
					yield(getPlayersFallAction().perform(), \"finished\")
				saveCheckpointsIfPossible()
			else:
				yield(card, \"finished\")

	var shootActions = []
	for player in get_tree().get_nodes_in_group(\"players\"):
		shootActions.append(Player.shootAction().with(player))
	yield(Parallell.new(shootActions).perform(), \"finished\")

func lasersShoot():
	var lasers = get_tree().get_nodes_in_group(\"lasers\")
	for laser in lasers:
		laser.shoot()
	for laser in lasers:
		yield(laser, \"finished\")

func saveCheckpointsIfPossible():
	for playerInfo in players.keys():
		var player = players[playerInfo] if players.has(playerInfo) else null
		if player:
			var checkpoint = $Root.getCheckpoint(player)
			if checkpoint:
				print(\"on checkpoint\")
				if !checkpoints.has(playerInfo) || checkpoint.number > checkpoints[playerInfo].number:
					if checkpoints.has(playerInfo):
						checkpoint.remove(playerInfo)
					checkpoints[playerInfo] = checkpoint
					checkpoint.touch(playerInfo)

func beltsMove():
	for i in range(1, 3):
		var beltAction = $Root/TileMap.getBeltAction(i)
		yield(beltAction.perform(), \"finished\")
		yield(getPlayersFallAction().perform(), \"finished\")
		yield(Actions.wait(0.5).perform(), \"finished\")
	saveCheckpointsIfPossible()

func getPlayersFallAction():
	var fallingActions = []
	for fallingPlayer in $Root.getPlayersInHole():
		fallingActions.append(Player.fallAction().with(fallingPlayer))
	return Parallell.new(fallingActions)

func beltPushPlayerIntoHole():
	var info = {\"name\": \"Olof\", \"color\": Color.blue}
	var player = addPlayerInfo(info)
	
	var cards = {info: [Cards.moveAction(Player.FORWARD, 2), Cards.moveAction(Player.FORWARD, 2)]}
	yield(startGame(cards), \"completed\")
	print(\"Players finished\")
	player = spawnPlayer(info)
	cards = {info: [Cards.moveAction(Player.FORWARD, 2), Cards.moveAction(Player.FORWARD, 2)]}
	yield(startGame(cards), \"completed\")

func spawnPlayer(info):
	if players.has(info):
		return
	var player = preload(\"res://Player.tscn\").instance()
	player.connect(\"onDestroyed\", self, \"onPlayerDestroyed\")
	add_child(player)
	player.position = checkpoints[info].position if checkpoints.has(info) else spawnPoints[info].position
	players[info] = player
	player.playerName = info.name if info.has(\"name\") else null
	player.color = info.color if info.has(\"color\") else null
	return player

func onPlayerDestroyed(player):
	var index = players.values().find(player)
	for info in players.keys():
		if player == players[info]:
			players.erase(info)

func addPlayerInfo(info):
	var spawnPoint = $Root.getSpawn(playerInfos.size())
	playerInfos.append(info)
	spawnPoints[info] = spawnPoint
	return spawnPlayer(info)

func removePlayerInfo(info):
	playerInfos.erase(info)
	spawnPoints.erase(info)
	var player = players[info]
	players.erase(info)
	remove_child(player)"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )

[node name="Network" type="Node2D" parent="."]
script = SubResource( 2 )
isServer = true

[node name="Game" type="Node2D" parent="."]
script = SubResource( 3 )

[node name="Root" parent="Game" instance=ExtResource( 1 )]
