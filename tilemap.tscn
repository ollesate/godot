[gd_scene load_steps=7 format=2]

[ext_resource path="res://Network.tscn" type="PackedScene" id=1]
[ext_resource path="res://Map.tscn" type="PackedScene" id=2]
[ext_resource path="res://GameUi.tscn" type="PackedScene" id=3]
[ext_resource path="res://PlayerScene.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var playerInfos = []
var readyPlayers = []
var cardPlayerInfos = {}

func onPlayerJoined(info):
	$Game.addPlayer(info)
	updateReady()
	
func onPlayerLeft(info):
	$Game.removePlayer(info)
	updateReady()

func onPlayerReady(info):
	readyPlayers.append(info)
	$Game.onPlayerReady(info)
	updateReady()

func onPlayerUnready(info):
	readyPlayers.remove(readyPlayers.find(info))
	$Game.onPlayerUnready(info)
	updateReady()

func onGameStart():
	for info in readyPlayers:
		$Game.onPlayerUnready(info)

func updateReady():
	var text = str(readyPlayers.size(), \" / \", $Network.playerInfos.size(), \" ready\")
	$GameUi/Header/Subtitle.text = text
	
func onPlayerUpdateInfo(info):
	$Game.updatePlayerInfo(info)

func _ready():
	var aspect = Vector2(1024, 576)
	get_tree().set_screen_stretch(SceneTree.STRETCH_MODE_2D, SceneTree.STRETCH_ASPECT_EXPAND, aspect)
	
	$Network.connect(\"onPlayerJoined\", self, \"onPlayerJoined\")
	$Network.connect(\"onPlayerLeft\", self, \"onPlayerLeft\")
	$Network.connect(\"onPlayerUnready\", self, \"onPlayerUnready\")
	$Network.connect(\"onPlayerUpdateInfo\", self, \"onPlayerUpdateInfo\")
	
	$Game.connect(\"onTurnStart\", self, \"onTurnStart\")
	$Game.connect(\"onPhaseStart\", self, \"onPhaseStart\")

	while true: # Play endlessly...
		$GameUi/Header/Progress.hide()
		$GameUi/Header/Title.show()
		$GameUi/Header/Title.text = \"Waiting for players...\"
		playerInfos = yield(waitForPlayers(), \"completed\")
		onGameStart()
		$Network.rpc(\"onGameStarted\")
		yield(playGame(), \"completed\")
		resetGame()

func onPhaseStart(phase):
	$GameUi/Header/Subtitle.text = phase
	
func onTurnStart(turn):
	$GameUi/Header/Title.text = str(\"Turn \", turn)

func cardStarted(card):
	var cardInfo = cardPlayerInfos[card]
	$Network.rpc_id(cardInfo.player.id, \"onCardStarted\", cardInfo.card)
	$GameUi/Header/Subtitle.text = str(cardInfo.player.name, \"'s turn: \", cardInfo.card.description, \", \", cardInfo.card.priority)
		
func cardFinished(card):
	var cardInfo = cardPlayerInfos[card]
	$Network.rpc_id(cardInfo.player.id, \"onCardFinished\", cardInfo.card)

func waitForPlayers():
	print(\"waitForPlayers\")
		
	while readyPlayers.size() == 0 or readyPlayers.size() != $Network.playerInfos.size():
		$GameUi/Header/Title.text = \"Waiting for players...\"
		var info = yield($Network, \"onPlayerReady\")
		onPlayerReady(info)
		print(\"on player ready \", readyPlayers.size(), $Network.playerInfos.size())
		if readyPlayers.size() == $Network.playerInfos.size():
			var time = 5
			$GameUi/Header/Title.text = str(\"Starting game in \", time)
			for i in range(time):
				yield(Actions.wait(1).perform(), \"finished\")
				if readyPlayers.size() != $Network.playerInfos.size():
					break
				$GameUi/Header/Title.text = str(\"Starting game in \", time - 1 - i)
				print(time - 1 - i)

	return $Network.playerInfos

func resetGame():
	pass

func playGame():
	print(\"playGame\")
	
	var gameFinished = false
	
	while !gameFinished:
		cardPlayerInfos.clear()
		
		# Give cards to player
		for info in playerInfos.values():
			var cardInfos = CardDeck.generateCardInfos(9)
			$Network.dealCardsToPlayer(info.id, cardInfos)
		
		$GameUi.startCountdown(3)
		$GameUi/Header/Progress.show()
		$GameUi/Header/Subtitle.hide()
		$GameUi/Header/Title.text = \"Card phase\"
		yield($GameUi, \"countdownFinished\")
		$GameUi/Header/Progress.hide()
		$GameUi/Header/Subtitle.show()

		var playerCards = {}
		var cardInfos = $Network.cardInfos
		for playerInfo in cardInfos.keys():
			var cards = []
			for cardInfo in cardInfos[playerInfo]:
				var card = CardDeck.cardFromInfo(cardInfo)
				cards.append(card)
				card.connect(\"cardStarted\", self, \"cardStarted\")
				card.connect(\"cardFinished\", self, \"cardFinished\")
				cardPlayerInfos[card] = {\"card\": cardInfo, \"player\": playerInfo} 
			playerCards[playerInfo] = cards
		
		$Network.rpc(\"startSimulation\")
		yield($Game.simulateGame(playerCards), \"completed\")

		gameFinished = false

	# Game is finished, wait for some time
	# Perhaps wait some player response?
	# Restart game"

[sub_resource type="GDScript" id=2]
script/source = "extends Node2D

var playerInfos = []
var spawnPoints = {}
var players = {}
var checkpoints = {}

signal lasersEnd()
signal onPhaseStart()
signal onTurnStart()

func _ready():
	pass

func simulateGame(allPlayerCards):
	var turns = []
	for turnIndex in range(5):
		var turn = []
		turns.append(turn)
		for info in allPlayerCards.keys():
			if allPlayerCards[info].size() > turnIndex:
				var card = allPlayerCards[info][turnIndex]
				turn.append(card.with(players[info]))
	
	for i in range(turns.size()):
		var turn = turns[i]
		emit_signal(\"onTurnStart\", i + 1)
		print(\"Players act\")
		yield(playersAct(turn), \"completed\")
		print(\"Lasers shoot\")
		emit_signal(\"onPhaseStart\", \"Lasers shoot\")
		yield(lasersShoot(), \"completed\")
		print(\"Belts move\")
		emit_signal(\"onPhaseStart\", \"Belts move\")
		yield(beltsMove(), \"completed\")

func playersAct(turn):	
	for card in turn:
		card.perform()
		if card.type == Cards.MOVE:
			var finished = false
			while(not finished and card.character != null):
				finished = yield(card, \"stepFinished\") == 0
				yield(getPlayersFallAction().perform(), \"finished\")
			saveCheckpointsIfPossible()
		else:
			yield(card, \"finished\")

	emit_signal(\"onPhaseStart\", \"Players fire\")
	var shootActions = []
	for player in players.values():
		shootActions.append(Player.shootAction().with(player))
	yield(Parallell.new(shootActions).perform(), \"finished\")

func lasersShoot():
	var lasers = get_tree().get_nodes_in_group(\"lasers\")
	for laser in lasers:
		laser.shoot()
	for laser in lasers:
		yield(laser, \"finished\")
	yield(Actions.wait(0.25).perform(), \"finished\")

func saveCheckpointsIfPossible():
	var checkpointTouchedIndex
	for playerInfo in players.keys():
		var player = players[playerInfo] if players.has(playerInfo) else null
		if player:
			var checkpoint = $Root.getCheckpoint(player)
			if checkpoint:
				print(\"on checkpoint\")
				if !checkpoints.has(playerInfo) || checkpoint.number > checkpoints[playerInfo].number:
					if checkpoints.has(playerInfo):
						checkpoint.remove(playerInfo)
					checkpoints[playerInfo] = checkpoint
					checkpoint.touch(playerInfo)
					checkpointTouchedIndex = checkpoint.number

	if checkpointTouchedIndex:
		for checkpoint in get_tree().get_nodes_in_group(\"checkpoints\"):
			if checkpoint.number == checkpointTouchedIndex + 1:
				checkpoint.setNext()

func beltsMove():
	for i in range(1, 3):
		var beltAction = $Root/TileMap.getBeltAction(i)
		yield(beltAction.perform(), \"finished\")
		yield(getPlayersFallAction().perform(), \"finished\")
		yield(Actions.wait(0.25).perform(), \"finished\")
	saveCheckpointsIfPossible()

func getPlayersFallAction():
	var fallingActions = []
	for fallingPlayer in $Root.getPlayersInHole():
		fallingActions.append(Player.fallAction().with(fallingPlayer))
	return Parallell.new(fallingActions)

func beltPushPlayerIntoHole():
	var info = {\"name\": \"Olof\", \"color\": Color.blue}
	var player = addPlayer(info)
	
	var cards = {info: [Cards.moveAction(Player.FORWARD, 2), Cards.moveAction(Player.FORWARD, 2)]}
	yield(simulateGame(cards), \"completed\")
	print(\"Players finished\")
	player = spawnPlayer(info)
	cards = {info: [Cards.moveAction(Player.FORWARD, 2), Cards.moveAction(Player.FORWARD, 2)]}
	yield(simulateGame(cards), \"completed\")

func spawnPlayer(info):
	if players.has(info):
		return
	var player = preload(\"res://Player.tscn\").instance()
	player.connect(\"onDestroyed\", self, \"onPlayerDestroyed\")
	add_child(player)
	player.position = checkpoints[info].position if checkpoints.has(info) else spawnPoints[info].position
	players[info] = player
	player.playerName = info.name if info.name else null
	player.color = info.color if info.color else null
	return player

func onPlayerDestroyed(player):
	var index = players.values().find(player)
	for info in players.keys():
		if player == players[info]:
			players.erase(info)

func addPlayer(info):
	var spawnPoint = $Root.getSpawn(playerInfos.size())
	playerInfos.append(info)
	spawnPoints[info] = spawnPoint
	return spawnPlayer(info)

func removePlayer(info):
	playerInfos.erase(info)
	spawnPoints.erase(info)
	var player = players[info]
	players.erase(info)
	remove_child(player)

func onPlayerReady(info):
	players[info].setReady(true)
	
func onPlayerUnready(info):
	players[info].setReady(false)

func updatePlayerInfo(info):
	players[info].playerName = info.name
	players[info].color = info.color"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )

[node name="Network" parent="." instance=ExtResource( 1 )]
isServer = true

[node name="Game" type="Node2D" parent="."]
script = SubResource( 2 )

[node name="Root" parent="Game" instance=ExtResource( 2 )]

[node name="GameUi" parent="." instance=ExtResource( 3 )]

[node name="PlayerScene" parent="." instance=ExtResource( 4 )]
margin_left = 675.0
margin_top = 173.75
margin_right = 675.0
margin_bottom = 173.75
rect_scale = Vector2( 0.25, 0.25 )
